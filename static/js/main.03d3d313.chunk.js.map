{"version":3,"sources":["util/Spotify.js","logo.svg","Components/SearchBar/App.js","Components/Track/App.js","Components/TrackList/App.js","Components/SearchResult/App.js","Components/Playlist/App.js","App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","console","log","tracks","map","id","SearchResult","class","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","singleTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03d3d313.chunk.js","sourcesContent":["let accessToken ;\r\nconst cliendId = '6bf6e56717df42e4a2b1f44f9354d95e'\r\nconst redirectUri = 'http://shallow-bath.surge.sh'\r\nconst Spotify = {\r\n    getAccessToken(){\r\n        if(accessToken){\r\n            return accessToken\r\n        }\r\n        //check for access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/)\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/)\r\n\r\n        if(accessTokenMatch && expiresInMatch){\r\n            accessToken = accessTokenMatch[1]\r\n            const expiresIn = Number(expiresInMatch[1])\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000)\r\n            window.history.pushState('Access Token', null, '/')\r\n            return accessToken\r\n        }else{\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${cliendId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\r\n            window.location = accessUrl\r\n        }\r\n    },\r\n    search(term){\r\n        const accessToken = Spotify.getAccessToken()\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => {\r\n            return response.json()\r\n        }).then(jsonResponse => {\r\n            if(!jsonResponse.tracks){\r\n                return []\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name, \r\n                artists: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }))\r\n        })\r\n    },\r\n    savePlaylist(name, trackUris){\r\n        if(!name || !trackUris.length){\r\n            return \r\n        }\r\n        const accessToken = Spotify.getAccessToken()\r\n        const headers = {Authorization: `Bearer ${accessToken}`}\r\n        let userId;\r\n        return fetch('https://api.spotify.com/v1/me', \r\n        {headers: headers}).then(response=> response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({name: name})\r\n            }).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.id\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body:JSON.stringify({uris: trackUris})\r\n                })\r\n            })\r\n        })\r\n\r\n    }\r\n}\r\nexport default Spotify","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport './style.css'\r\nexport class SearchBar extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            term: ''\r\n        }\r\n        this.search = this.search.bind(this)\r\n        this.handleTermChange = this.handleTermChange.bind(this)\r\n    }\r\n    search(){\r\n        this.props.onSearch(this.state.term)\r\n    }\r\n    handleTermChange(event){\r\n        this.setState({term: event.target.value})\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\" \r\n                onChange={this.handleTermChange}/>\r\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport './style.css'\r\nexport class Track extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.addTrack = this.addTrack.bind(this)\r\n        this.removeTrack = this.removeTrack.bind(this)\r\n    }\r\n    renderAction(){\r\n        if(this.props.isRemoval){\r\n            return <button className='Track-action' onClick={this.removeTrack}>-</button>\r\n        }\r\n        else{\r\n            return <button className='Track-action' onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n    addTrack(){\r\n        this.props.onAdd(this.props.track)\r\n    }\r\n    removeTrack(){\r\n        this.props.onRemove(this.props.track)\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name} </h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album} </p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport './style.css'\r\nimport {Track}  from '../Track/App'\r\n\r\nexport class TrackList extends React.Component{\r\n    render(){\r\n        console.log('hello theresdfsdf riel')\r\n        console.log(this.props)\r\n        \r\n        return(\r\n            <div className=\"TrackList\">\r\n                        {this.props.tracks.map(track => {\r\n                          return <Track track={track} key={track.id} \r\n                          onAdd={this.props.onAdd} onRemove={this.props.onRemove}\r\n                          isRemoval={this.props.isRemoval}\r\n                          />})}    \r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport './style.css'\r\nimport {TrackList} from '../TrackList/App'\r\nexport class SearchResult extends React.Component{\r\n    render(){\r\n        return(\r\n            <div class=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} \r\n                onAdd={this.props.onAdd}\r\n                isRemoval={false}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport './style.css'\r\nimport {TrackList} from '../TrackList/App'\r\nexport class Playlist extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.handleNameChange = this.handleNameChange.bind(this)\r\n    }\r\n    handleNameChange(event){\r\n        this.props.onNameChange(event.target.value)\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange}/>\r\n                <TrackList tracks={this.props.playlistTracks} \r\n                onRemove={this.props.onRemove}\r\n                isRemoval={true}/>\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport { SearchBar } from './Components/SearchBar/App';\nimport {SearchResult} from './Components/SearchResult/App'\nimport { Playlist } from './Components/Playlist/App';\nimport React from 'react';\n\nimport Spotify  from './util/Spotify';\nexport class App extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this)\n    this.removeTrack = this.removeTrack.bind(this)\n    this.updatePlaylistName = this.updatePlaylistName.bind(this)\n    this.savePlaylist = this.savePlaylist.bind(this)\n    this.search = this.search.bind(this)\n  }\n  addTrack(track){\n    let tracks = this.state.playlistTracks\n    if(tracks.find(savedTrack => savedTrack.id === track.id)){\n      return;\n    }\n    tracks.push(track)\n    this.setState({playlistTracks: tracks})\n  }\n  removeTrack(track){\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(singleTrack => singleTrack.id !== track.id)\n    this.setState({playlistTracks:tracks})\n  }\n  updatePlaylistName(name){\n    this.setState({playlistName: name})\n\n  }\n  savePlaylist(){\n    const trackUris = this.state.playlistTracks.map(track => track.uri)\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks : []\n      })\n    })\n\n  }\n  search(term){\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    })\n  }\n  render(){\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResult searchResults={this.state.searchResults} \n            onAdd={this.addTrack}/>\n            \n            <Playlist playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks}\n            onRemove={this.removeTrack}\n            onNameChange={this.updatePlaylistName}\n            onSave={this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n      );\n  }\n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}